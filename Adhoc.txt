--Question 1.
SELECT DISTINCT 
    product_name, -- Selects the product name for unique products
    category,     -- Includes the category of the product
    base_price    -- Includes the base price of the product
FROM 
    dim_products -- Product details table
JOIN 
    fact_events  -- Events table with promo-related information
ON 
    dim_products.product_code = fact_events.product_code -- Joins both tables on product_code
WHERE 
    promo_type = 'BOGOF' -- Filters for products in "Buy One Get One Free" promotion
    AND base_price > 500; -- Filters for products with a base price greater than 500


--Question 2
SELECT 
    city, -- City name
    COUNT(DISTINCT store_id) AS store_count -- Counts unique store IDs in each city
FROM 
    dim_stores -- Table containing store details
GROUP BY 
    city -- Groups data by city to aggregate store counts
ORDER BY 
    store_count DESC; -- Orders the results by store count in descending order


--Question 3
SELECT 
    c.campaign_name, -- Selects the campaign name
    CONCAT(ROUND(SUM(fe.`quantity_sold(before_promo)` * fe.base_price) / 1000000, 0), ' M') AS total_rev_before_promo_in_millions, 
        -- Calculates total revenue before promo, converts to millions, and rounds off
    CONCAT(ROUND(SUM(fe.`quantity_sold(after_promo)` * fe.base_price) / 1000000, 0), ' M') AS total_rev_after_promo_in_millions 
        -- Calculates total revenue after promo, converts to millions, and rounds off
FROM 
    fact_events fe -- Events table with transaction and quantity details
JOIN 
    dim_campaigns c -- Campaigns table with promo campaign information
ON 
    fe.campaign_id = c.campaign_id -- Joins both tables on campaign_id
GROUP BY 
    c.campaign_name -- Groups data by campaign name to calculate revenue for each
ORDER BY 
    total_rev_before_promo_in_millions DESC, -- Orders by total revenue before promo in descending order
    total_rev_after_promo_in_millions DESC; -- Secondary ordering by total revenue after promo in descending order


--Question 4
WITH ISU AS ( -- Creates a Common Table Expression (CTE) to calculate ISU% for categories
    SELECT 
        dp.category, -- Selects product category
        ROUND(((SUM(fe.`quantity_sold(after_promo)`) - SUM(fe.`quantity_sold(before_promo)`)) 
            / SUM(fe.`quantity_sold(before_promo)`)) * 100, 2) AS ISU_percentage 
        -- Calculates Incremental Sales Units (ISU%) as a percentage
    FROM 
        dim_products dp -- Product details table
    JOIN 
        fact_events fe ON dp.product_code = fe.product_code 
        -- Joins products and events tables on product_code
    JOIN 
        dim_campaigns c ON fe.campaign_id = c.campaign_id 
        -- Joins events and campaigns tables on campaign_id
    WHERE 
        c.campaign_name = 'Diwali' -- Filters data for the "Diwali" campaign
    GROUP BY 
        dp.category -- Groups by category to calculate ISU% for each
)
SELECT 
    *, -- Selects all columns from the CTE
    RANK() OVER (ORDER BY ISU_percentage DESC) AS ISU_Rank -- Adds a rank based on ISU% in descending order
FROM 
    ISU; -- Queries the CTE

--Question 5
SELECT 
    p.product_name, -- Selects product name
    p.category, -- Includes product category
    CONCAT(
        ROUND(
            ((SUM(fe.`quantity_sold(after_promo)` * base_price) 
            - SUM(fe.`quantity_sold(before_promo)` * base_price)) 
            / SUM(fe.`quantity_sold(before_promo)` * base_price) * 100), 
        2), " %") AS IR_percentage 
    -- Calculates Incremental Revenue (IR%) as a percentage and formats it as a string
FROM 
    fact_events AS fe -- Events table
JOIN 
    dim_products AS p ON fe.product_code = p.product_code 
    -- Joins products and events tables on product_code
GROUP BY 
    p.product_name, p.category -- Groups by product name and category to calculate IR% for each
ORDER BY 
    ((SUM(fe.`quantity_sold(after_promo)` * base_price) 
    - SUM(fe.`quantity_sold(before_promo)` * base_price)) 
    / SUM(fe.`quantity_sold(before_promo)` * base_price) * 100) DESC 
    -- Orders by IR% in descending order
LIMIT 5; -- Retrieves the top 5 products with the highest IR%
